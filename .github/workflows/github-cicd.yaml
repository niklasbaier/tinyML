name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

# TODO: add appropriate build job and deploy steps
jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup steps
      # -----------
      - name: Read Python version from .python-version file
        id: python_version
        run: echo "::set-output name=PYTHON_VERSION::$(bash scripts/cicd/setup/read_python_version.sh)"

      - name: Install Python ${{ steps.python_version.outputs.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}

      - name: Install Poetry
        run: bash scripts/cicd/setup/install_poetry.sh

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # QA steps
      # -----------
      - name: Ensure correct specifications of dependencies
        run: poetry check

      - name: Static tests - linting with ruff
        run: poetry run ruff check .

      - name: Static tests - type checking with mypy
        run: poetry run mypy src

      # only applicable if using an API service that uses OpenAPI
      # - name: OpenAPI spec linting
      #   run: poetry run openapi-spec-validator services/api/openapi.yml

      # only applicable if using a DB service that uses alembic for migrations
      # - name: Alembic check
      #   run: |
      #     poetry run alembic upgrade head
      #     poetry run alembic check

      - name: Unit tests
        run: poetry run pytest --cov tests/unit/. --cov-report=xml:tests/unit/coverage_unit.xml

      - name: Integration tests
        run: poetry run pytest --cov tests/integration/. --cov-report=xml:tests/integration/coverage_integration.xml

      - name: Acceptance tests
        run: poetry run pytest --cov tests/acceptance/. --cov-report=xml:tests/acceptance/coverage_acceptance.xml

      - name: Upload test coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          files: |
            tests/unit/coverage_unit.xml
            tests/unit/coverage_integration.xml
            tests/unit/coverage_acceptance.xml
          flags: unittests, integrationtests, acceptancetests
          token: ${{ secrets.CODECOV_TOKEN }} # defined in project settings
          verbose: true # optional (default = false)

  # build:

  bump:
    if: "!startsWith(github.event.head_commit.message, 'bump:')"
    runs-on: ubuntu-latest
    needs: qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.PERSONAL_ACCESS_TOKEN }}"
          fetch-depth: 0

      - name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [qa, bump]
    steps:
      - uses: actions/cache@v2
        with:
          key: ${{ github.ref }}$
          path: .cache

      - name: Checkout code
        uses: actions/checkout@v3

      # Setup steps
      # -----------
      - name: Read Python version from .python-version file
        id: python_version
        run: echo "::set-output name=PYTHON_VERSION::$(bash scripts/cicd/setup/read_python_version.sh)"

      - name: Install Python ${{ steps.python_version.outputs.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}

      - name: Install Poetry
        run: bash scripts/cicd/setup/install_poetry.sh

      # Docs steps
      # -----------
      - name: Install docs dependencies
        run: poetry install --only docs --no-interaction --no-ansi

      - name: Trigger docs deployment (`pages-build-deployment` workflow)
        run: poetry run mkdocs gh-deploy --force
